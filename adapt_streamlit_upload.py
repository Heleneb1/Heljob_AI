import logging
import tempfile
import time
import os

# Biblioth√®ques tierces
import streamlit as st
import ollama
import fitz  # PyMuPDF pour lire les fichiers PDF
from langchain.schema import Document
from langchain.retrievers.multi_query import MultiQueryRetriever
from langchain_community.vectorstores import Chroma
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langdetect import detect
#  Pour ouvrir en localhost: streamlit run adapt_streamlit_upload.py

# Configuration du syst√®me de journalisation pour suivre l'ex√©cution du programme
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Constantes utilis√©es dans le programme
MODEL_NAME = "llama3.2"  # Nom du mod√®le utilis√©
EMBEDDING_MODEL = "nomic-embed-text"  # Mod√®le pour les embeddings
VECTOR_STORE_NAME = "simple-rag"  # Nom de la base de donn√©es vectorielle
PERSIST_DIRECTORY = "./chroma_db"


def ingest_pdf(file):
    """Charger et traiter un document PDF upload√©."""
    # import fitz  # PyMuPDF
    try:
        pdf_document = fitz.open(stream=file.read(), filetype="pdf")
        data = [
            Document(page_content=page.get_text(), metadata={"page_number": page_num})
            for page_num, page in enumerate(pdf_document)
        ]
        pdf_document.close()
        return data
    except Exception as e:
        logging.error(f"Erreur lors du chargement du PDF : {e}")
        return None

# Fonction pour lire un fichier texte (comme une offre d'emploi)
def read_text_file(file):
    """Lire un fichier texte upload√©."""
    try:
        return file.read().decode("utf-8")  # Assure-toi que c'est bien encod√© en UTF-8
    except Exception as e:
        logging.error(f"Erreur lors du chargement du fichier texte : {e}")
        return None

# Fonction pour diviser le contenu en morceaux plus petits pour traitement
def split_documents(documents):
    """Diviser les documents en plus petits morceaux."""
    # Diviseur de texte bas√© sur la longueur, avec chevauchement pour le contexte
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1200, chunk_overlap=300)
    chunks = text_splitter.split_documents(documents)
    logging.debug("Documents divis√©s en morceaux.")
    return chunks

# Fonction pour adapter un CV √† une offre d'emploi
def adapter_cv_ollama(cv_data, job_offer):
    """Adapter le CV avec Ollama."""
    
    try:
        lang = detect(job_offer)  # Retourne 'en' pour l'anglais, 'fr' pour le fran√ßais, etc.
        if lang == "en":
            prompt = f"""
            Here is my structured CV: {cv_data}
            Here is the job offer: {job_offer}
            Suggest relevant changes to make my resume a better match for this offer.
            Provided a complete CV, passing the ATS, adapted and updated to best match the offer according to my background.
                        """
        else:
            prompt = f"""
            Voici mon CV structur√© : {cv_data}
            Voici l'offre d'emploi : {job_offer}
            Propose des modifications pertinentes pour que mon CV corresponde mieux √† cette offre.
            Fournis un CV complet, passant les ATS, adapt√© et mis √† jour pour correspondre au mieux √† l'offre en fonction de mon parcours.
                        """
        logging.debug("D√©but de l'adaptation du CV...")
        
        # Envoi de la requ√™te au mod√®le et r√©cup√©ration de la r√©ponse
        response = ollama.generate(model=MODEL_NAME, prompt=prompt)
        
        if not response or "response" not in response:
            raise ValueError("Erreur dans la r√©ponse d'Ollama.")

        cv_modifie = response.get("response", "")
        logging.debug("Adaptation du CV termin√©e.")
        return cv_modifie
    except Exception as e:
        logging.error(f"Erreur lors de l'adaptation du CV : {e}")
        return None

# Fonction pour g√©n√©rer une lettre de motivation √† partir d'un CV et d'une offre
def generer_lettre_motivation_ollama(cv_data, job_offer):
    """G√©n√©rer une lettre de motivation avec Ollama."""
    try:
        lang = detect(job_offer)  # Retourne 'en' pour l'anglais, 'fr' pour le fran√ßais, etc.
        if lang == "en":
            prompt = f"""
            Here is my structured CV: {cv_data}
            Here is the job offer: {job_offer}
            Write a professional cover letter tailored to this job offer. Mention the recruiting company and explain how my values align with theirs. The cover letter should be in English.
            """
        else:
            prompt = f"""
            Voici mon CV structur√© : {cv_data}
            Voici l'offre d'emploi : {job_offer}
            R√©dige une lettre de motivation professionnelle adapt√©e. Parle de l'entreprise qui recrute et pourquoi mes valeurs y correspondent. La lettre doit √™tre en fran√ßais.
            """

        logging.debug("D√©but de la g√©n√©ration de la lettre de motivation...")
        
        # Envoi de la requ√™te au mod√®le et r√©cup√©ration de la r√©ponse
        response = ollama.generate(model=MODEL_NAME, prompt=prompt)
        lettre_motivation = response.get("response", "")
        logging.debug("G√©n√©ration de la lettre de motivation termin√©e.")
        return lettre_motivation
    except Exception as e:
        logging.error(f"Erreur lors de la g√©n√©ration de la lettre : {e}")
        return None

# Sauvegarde temporaire 
def sauvegarder_fichier_temporaire(contenu):
    """Sauvegarder le contenu dans un fichier temporaire."""
    try:
        with tempfile.NamedTemporaryFile(delete=False, mode="w", encoding="utf-8") as temp_file:
            temp_file.write(contenu)
            temp_filename = temp_file.name  # Retourne le nom du fichier temporaire
        logging.debug(f"Fichier temporaire sauvegard√© avec succ√®s : {temp_filename}")
        return temp_filename
    except Exception as e:
        logging.error(f"Erreur lors de la sauvegarde du fichier temporaire : {e}")
        return None

# def clean_temp_file(temp_file):
#     """Supprimer un fichier temporaire et g√©rer les erreurs."""
#     try:
#         if os.path.exists(temp_file):
#             os.remove(temp_file)
#             logging.info(f"Fichier temporaire supprim√© : {temp_file}")
#         else:
#             logging.warning(f"Le fichier {temp_file} n'existe pas.")
#     except Exception as e:
#         logging.error(f"Erreur lors de la suppression du fichier {temp_file}: {e}")

def afficher_animation_chargement():
    """Afficher une animation de chargement avec Streamlit."""
    with st.spinner("Chargement en cours..."):
        time.sleep(60)  # Simule un d√©lai pour l'animation
        
    
# Fonction principale orchestrant tout le processus
def main():
    # Ajouter du CSS personnalis√©
    st.markdown(
        """
        <style>
        h1 {
            color: #0d92a3;
            padding-bottom: 2rem;
            font-size: 4rem;
        }
        textarea {
            border: 2px solid #0d92a3 !important; /* Couleur personnalis√©e */
            border-radius: 5px; /* Coins arrondis */
            padding: 10px; /* Espacement interne */
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); /* Ombre l√©g√®re */
        }
        /* Cibler le bouton secondaire "Browse files" */
        button[data-testid="stBaseButton-secondary"] {
            border: 2px solid #0d92a3 !important;
            background-color: #0d92a3 !important;
            color: white !important;
            border-radius: 5px; /* Coins arrondis */
            padding: 10px; /* Espacement interne */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Ombre l√©g√®re */
            font-weight: bold;
            font-size: 14px;
        }
        /* Effet au survol */
        button[data-testid="stBaseButton-secondary"]:hover {
            background-color: #0b7983 !important; /* Couleur plus fonc√©e */
            border-color: #0b7983 !important;
        }
        /* Effet au clic */
        button[data-testid="stBaseButton-secondary"]:active {
            background-color: #151515 !important; /* Couleur encore plus fonc√©e */
            border-color: #fff !important;
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    if "cv_data" not in st.session_state:
        st.session_state.cv_data = None

    if "job_offer" not in st.session_state:
        st.session_state.job_offer = None

    st.title("Heljob-AI ü§ñ" )

    st.text("CV Assistant ‚òëÔ∏è")
    
    st.sidebar.title("Menu üìñ")
    # Descriptif dans la barre lat√©rale
    st.sidebar.markdown("Ins√®re ton CV et ton offre, et laisse la magie op√©rer ‚ú®")
    step = st.sidebar.radio("√âtapes", ["Charger les donn√©es", "Adapter le CV", "G√©n√©rer la lettre"])

    # Charger le CV et l'offre
    if step == "Charger les donn√©es":
        st.subheader("Chargement des donn√©es")
                
        # Upload des fichiers
        cv_file = st.file_uploader("T√©l√©charge ton CV ‚¨áÔ∏è (PDF)", type="pdf")
        st.text("T√©l√©charge, ou colle le texte de l'offre d'emploi dans le champs d√©di√©")
        job_offer_file = st.file_uploader("T√©l√©charge l'offre d'emploi ‚¨áÔ∏è (TXT)", type="txt")
        # Champ pour coller l'annonce
        job_offer_text = st.text_area(" Ou colle l'offre d'emploi ici üìã :", height=150)

        if st.button("Charger les donn√©es"):
            
            if cv_file:
                try:
                    st.session_state.cv_data = ingest_pdf(cv_file)
                except Exception as e:
                    st.error(f"Erreur lors de la lecture du CV : {e}")
            
            # V√©rifier si l'utilisateur a coll√© ou upload√© l'offre
            if job_offer_text.strip():
                st.session_state.job_offer = job_offer_text
            elif job_offer_file:
                try:
                    st.session_state.job_offer = job_offer_file.read().decode("utf-8")
                except Exception as e:
                    st.error(f"Erreur lors de la lecture de l'offre d'emploi : {e}")
            
            if st.session_state.cv_data and st.session_state.job_offer:
                st.success("Les donn√©es ont √©t√© charg√©es avec succ√®s. üéâ")
            else:
                st.error("Veuillez fournir un CV au format PDF et une offre d'emploi de type texte avant de continuer üõë.")

    # Adapter le CV √† l'offre
    elif step == "Adapter le CV":
        st.header("Adapter le CV √† l'offre")
        if st.session_state.cv_data and st.session_state.job_offer:
            if st.button("Adapter le CV"):
                afficher_animation_chargement()
                cv_adapte = adapter_cv_ollama(st.session_state.cv_data, st.session_state.job_offer)
                if cv_adapte:
                    temp_filename = sauvegarder_fichier_temporaire(cv_adapte)  # Sauvegarde dans un fichier temporaire
                    if temp_filename:
                        st.success("CV adapt√© g√©n√©r√© avec succ√®s.")
                        st.download_button(
                            label="T√©l√©charger le CV adapt√©",
                            data=open(temp_filename, "r", encoding="utf-8").read(),  # Lit le fichier temporaire pour le t√©l√©chargement ajout utf-8 pour lecture des caract√®res sp√©ciaux
                            file_name="CV_adapte.txt",
                            mime="text/plain"
                        )
        else:
            st.warning("Veuillez charger le CV et l'offre avant de continuer.")

    # G√©n√©rer la lettre de motivation
    elif step == "G√©n√©rer la lettre":
        st.header("G√©n√©rer une lettre de motivation")
        if st.session_state.cv_data and st.session_state.job_offer:
            if st.button("G√©n√©rer la lettre"):
                afficher_animation_chargement()
                lettre_motivation = generer_lettre_motivation_ollama(st.session_state.cv_data, st.session_state.job_offer)
                if lettre_motivation:
                    temp_filename=sauvegarder_fichier_temporaire(lettre_motivation)
                    if temp_filename:
                        st.success("Lettre de motivation g√©n√©r√©e avec succ√®s.")
                        st.download_button(
                        label="T√©l√©charger la lettre de motivation",
                        data=open(temp_filename, "r", encoding="utf-8").read(),
                        file_name="Lettre_motivation.txt",
                        mime="text/plain"
                    )
        else:
            st.warning("Veuillez charger le CV et l'offre avant de continuer.")

       


if __name__ == "__main__":
    main()
